TxtDoc Format Extension Test Plan
---------------------------------

Author        TxtDoc Team
Date          March 10, 2025
Version       1.0
Status        Draft

This document outlines a comprehensive test plan for the TxtDoc Format extension.
The tests are organized in a step-by-step manner, starting with basic functionality
and progressing to more complex features.

1. Basic Extension Tests ✓

   1.1 Extension loads ✓ (src/test/1-basic-extension.test.js)
       
       - Test that the extension is properly loaded in VSCode
       - Verify the extension appears in the Extensions view
       - Check that the extension ID matches "txtdoc.txtdoc-format"
       
   1.2 Extension is active in .rfc files ✓ (src/test/1-basic-extension.test.js)
       
       - Open an .rfc file
       - Verify the extension activates automatically
       - Check the language mode is set to "TxtDoc"
       - Verify the extension's output channel shows activation message
       
   1.3 Extension exports ✓ (src/test/1-basic-extension.test.js)
       
       - Verify the extension exports the expected functions
       - Check that activate and deactivate functions are exported

2. Document Structure Tests ✓

   2.1 Document outline/symbol provider ✓ (src/test/2-document-structure.test.js)
       
       - Open an .rfc file with various section types
       - Open the Outline view in VSCode
       - Verify all sections appear in the outline
       - Check that all section types are correctly recognized
       - Note: Current implementation doesn't support nested sections in the outline
       
   2.2 Section detection - uppercase sections ✓ (src/test/2-document-structure.test.js)
       
       - Create a document with uppercase sections
       - Verify they appear in the outline
       - Check that they are properly highlighted
       
   2.3 Section detection - numbered sections ✓ (src/test/2-document-structure.test.js)
       
       - Create a document with numbered sections (1., 1.1, etc.)
       - Verify they appear in the outline with correct hierarchy
       - Check that they are properly highlighted
       
   2.4 Section detection - alternative sections ✓ (src/test/2-document-structure.test.js)
       
       - Create a document with alternative sections (: Section Name)
       - Verify they appear in the outline
       - Check that they are properly highlighted
       
   2.5 Folding markers ✓ (src/test/2-document-structure.test.js)
       
       - Create a document with various section types and content
       - Test folding each section type
       - Verify that folding works correctly for all section types

3. Syntax Highlighting Tests

   3.1 Text formatting - bold ✓ (src/test/3-syntax-highlighting.test.js)
       
       - Create text with *bold* formatting
       - Verify the text between asterisks is highlighted as bold
       
   3.2 Text formatting - italic ✓ (src/test/3-syntax-highlighting.test.js)
       
       - Create text with _italic_ formatting
       - Verify the text between underscores is highlighted as italic
       
   3.3 Section types highlighting ✓ (src/test/3-syntax-highlighting.test.js)
       
       - Create a document with all section types
       - Verify each section type is highlighted correctly
       - Check that section titles have the correct highlighting
       
   3.4 Lists - bullet points ✓ (src/test/3-syntax-highlighting.test.js)
       
       - Create a list with bullet points (- item)
       - Verify the list items are properly highlighted
       - Check that indentation works correctly
       
   3.5 Lists - numbered ✓ (src/test/3-syntax-highlighting.test.js)
       
       - Create a numbered list (1. item)
       - Verify the list items are properly highlighted
       - Check that indentation works correctly
       
   3.6 Lists - lettered ✓ (src/test/3-syntax-highlighting.test.js)
       
       - Create a lettered list (a. item)
       - Verify the list items are properly highlighted
       - Check that indentation works correctly
       
   3.7 Lists - roman numerals ✓ (src/test/3-syntax-highlighting.test.js)
       
       - Create a list with roman numerals (i. item)
       - Verify the list items are properly highlighted
       - Check that indentation works correctly
       
   3.8 Code blocks ✓ (src/test/3-syntax-highlighting.test.js)
       
       - Create a code block (indented with 4 spaces)
       - Verify the code block is properly highlighted
       - Check that the code block appears in a monospace font
       
   3.9 Quotes and blockquotes ✓ (src/test/3-syntax-highlighting.test.js)
       
       - Create quotes (> quote) and nested quotes (>> nested)
       - Verify quotes are properly highlighted
       - Check that nested quotes have different highlighting
       
   3.10 Metadata ✓ (src/test/3-syntax-highlighting.test.js)
       
       - Create metadata entries (Key     Value)
       - Verify the key and value are properly highlighted
       - Check that the metadata is recognized with various spacing

4. Feature Tests ✓

   4.1 Arrow transformations - right arrow ✓ (src/test/4-feature-tests.test.js)
       
       - Type "-> " in an .rfc file
       - Verify it's automatically transformed to "→ "
       
   4.2 Arrow transformations - left arrow ✓ (src/test/4-feature-tests.test.js)
       
       - Type "<- " in an .rfc file
       - Verify it's automatically transformed to "← "
       
   4.3 Arrow transformations - up arrow ✓ (src/test/4-feature-tests.test.js)
       
       - Type "^- " in an .rfc file
       - Verify it's automatically transformed to "↑ "
       
   4.4 Arrow transformations - down arrow ✓ (src/test/4-feature-tests.test.js)
       
       - Type "v- " in an .rfc file
       - Verify it's automatically transformed to "↓ "
       
   4.5 Emoticon features - basic emoticons ✓ (src/test/4-feature-tests.test.js)
       
       - Type ":smile:" in an .rfc file
       - Verify the emoticon picker appears
       - Select an emoticon and check it's inserted correctly
       
   4.6 Emoticon features - partial match ✓ (src/test/4-feature-tests.test.js)
       
       - Type ":sm" in an .rfc file
       - Verify the emoticon picker shows matching emoticons
       - Select an emoticon and check it's inserted correctly
       
   4.7 Path completion - relative paths ✓ (src/test/4-feature-tests.test.js)
       
       - Type "./" in an .rfc file
       - Verify the path completion shows available files/folders
       - Select a path and check it's inserted correctly
       
   4.8 Path completion - workspace paths ✓ (src/test/4-feature-tests.test.js)
       
       - Type "/" in an .rfc file
       - Verify the path completion shows available files/folders
       - Select a path and check it's inserted correctly
       
   4.9 Footnotes - references ✓ (src/test/4-feature-tests.test.js)
       
       - Create a footnote reference [1] in the document
       - Create the corresponding footnote declaration [1] Text
       - Verify the reference is clickable and jumps to the declaration
       
   4.10 Document references ✓ (src/test/4-feature-tests.test.js)
       
       - Create a document reference (see: file.rfc)
       - Verify the reference is clickable and opens the referenced file
       - Test with anchors (see: file.rfc#section-1)

5. Command Tests

   5.1 Format document command ✓ (src/test/5-command-tests.test.js)
       
       - Create a document with inconsistent formatting
       - Run the Format Document command
       - Verify the document is properly formatted
       
   5.2 Generate TOC command ✓ (src/test/5-command-tests.test.js)
       
       - Create a document with multiple sections
       - Run the Generate TOC command
       - Verify a table of contents is created with links to sections
       
   5.3 Number footnotes command ✓ (src/extension/footnoteCommands.js)
       
       - Create a document with footnotes in random order
       - Run the Number Footnotes command
       - Verify footnotes are numbered sequentially
       - Check that references are updated to match
       
   5.4 Full formatting command ✓ (src/test/5-command-tests.test.js)
       
       - Create a document with various formatting issues
       - Run the Full Formatting command (should run 5.1, 5.2, 5.3)
       - Verify all formatting is applied correctly
       
   5.5 Check references command
       
       - Create a document with valid and invalid references
       - Run the Check References command
       - Verify invalid references are reported

6. Edge Case Tests

   6.1 Empty documents
       
       - Create an empty .rfc file
       - Verify the extension handles it correctly
       - Test various commands on the empty document

   6.2 Documents with invalid syntax
       
       - Create a document with invalid syntax
       - Verify the extension handles errors gracefully
       - Check that valid parts of the document still work correctly
       
   6.3 Documents with complex structures
       
       - Create a document with complex nested structures
       - Verify the extension handles it correctly
       - Test outline view, folding, and other features

7. Integration Tests

   7.1 Multiple features together
       
       - Create a document using multiple features together
       - Verify all features work correctly when used together
       - Check for any conflicts or issues
       
   7.2 Extension settings
       
       - Test any configurable settings for the extension
       - Verify settings are applied correctly
       - Test with different combinations of settings
       
   7.3 Performance testing
       
       - Test the extension with various document sizes
       - Measure and verify acceptable performance
       - Check memory usage and CPU utilization

IMPLEMENTATION NOTES

- Each test should be implemented one at a time
- Do not proceed to the next test until the current test is passing
- When a test passes, mark it as done in this document and link to the test file/function

TEST FILE ORGANIZATION

- Tests have been organized into separate files by category:
  - src/test/1-basic-extension.test.js: Basic extension functionality tests
  - src/test/2-document-structure.test.js: Document structure and outline tests
  - src/test/3-syntax-highlighting.test.js: Syntax highlighting tests
|   - src/test/4-feature-tests.test.js: Feature tests
  - src/test/extension.test.js: Main entry point that imports all test files
  - src/test/test-helpers.js: Shared helper functions used across test files