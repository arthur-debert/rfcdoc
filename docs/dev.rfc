TxtDoc Extension Development Guide
-------------------------------

This document provides guidance for developers working on the TxtDoc extension,
focusing on testing procedures.

1. Testing the Extension

   The TxtDoc extension uses both manual and automated testing approaches.
   This section explains how to run the automated tests.
   
   1.1 Test Structure
   
       The test files are located in the following directories:
       
       - src/test/           - Contains automated test files
       - fixtures/           - Contains sample files for manual testing
   
   1.2 Running Tests from Command Line
   
       Tests can be run from the command line using npm:
       
       ```
       npm test
       ```
       
       This command uses the vscode-test CLI to:
       - Download VS Code (if not already downloaded)
       - Launch VS Code Extension Development Host
       - Run the tests defined in src/test/extension.test.js
       - Display test results in the console
       
       Alternatively, you can run tests using the manual test runner:
       
       ```
       node ./src/test/runTest.js
       ```
       
       Both methods will show detailed test results including:
       - Number of tests run
       - Number of tests passed/failed
       - Test execution time
       - Detailed error messages for failed tests
   
   1.3 Running Tests from VS Code
   
       To run tests from within VS Code:
       
       1. Open the Run and Debug view (Ctrl+Shift+D or Cmd+Shift+D)
       2. Select "Extension Tests" from the dropdown menu
       3. Click the green play button or press F5
       
       This will:
       - Launch a new VS Code window in Extension Development Host mode
       - Run the tests defined in src/test/extension.test.js
       - Display test results in the Debug Console
       
       Debugging tests:
       - You can set breakpoints in your test files
       - Use the debug toolbar to step through code
       - Inspect variables in the Variables panel
       - View call stack in the Call Stack panel

2. Adding New Tests

   2.1 Creating Test Files
   
       New test files should be added to the src/test/ directory with a .test.js
       extension. The test runner will automatically discover and run these files.
       
       Example test file structure:
       
       ```javascript
       const assert = require('assert');
       const vscode = require('vscode');
       
       suite('Feature Test Suite', () => {
         test('Feature should work', () => {
           // Test code here
           assert.ok(true);
         });
       });
       ```
   
   2.2 Testing Extension Features
   
       When testing extension features, you have full access to the VS Code API.
       This allows you to:
       
       - Access extension instances
       - Manipulate documents
       - Trigger commands
       - Verify UI elements
       
       Example testing extension activation:
       
       ```javascript
       test('Extension activation', async () => {
         const extension = vscode.extensions.getExtension('txtdoc.txtdoc-format');
         assert.ok(extension, 'Extension should be available');
         
         if (!extension.isActive) {
           await extension.activate();
         }
         
         assert.ok(extension.isActive, 'Extension should be activated');
       });
       ```

3. Test Configuration

   3.1 Configuration Files
   
       The test configuration is defined in the following files:
       
       - .vscode-test.js - Configuration for the vscode-test CLI
       - .vscode/launch.json - Launch configuration for VS Code
       - package.json - npm scripts for running tests
       
       The .vscode-test.js file configures:
       - Test file patterns
       - Mocha options
       - VS Code launch arguments
       
       Example .vscode-test.js:
       
       ```javascript
       const { defineConfig } = require('@vscode/test-cli');
       
       module.exports = defineConfig({
         files: 'src/test/**/*.test.js',
         workspaceFolder: './fixtures',
         mocha: {
           ui: 'tdd',
           timeout: 20000
         }
       });