MANUAL PARSING IN RFCDOC

This document lists all the parsing that's currently being done manually in the RfcDoc parser when the peggy parser fails. These are the elements that need to be migrated to the peggy.js grammar.

1. DOCUMENT STRUCTURE
   - Splitting input into lines
   - Categorizing lines into different content types
   - Handling empty lines
   - Separating metadata from content

2. METADATA
   - Parsing "Key: Value" format
   - Handling metadata with varying spacing
   - Distinguishing metadata from sections with colons

3. SECTIONS
   - Parsing numbered sections (e.g., "1. Title", "1.1. Title")
   - Parsing alternative sections (e.g., ": Title")
   - Parsing uppercase sections (e.g., "TITLE")
   - Handling section hierarchy and nesting

4. PARAGRAPHS
   - Basic paragraph text parsing
   - Handling paragraphs with indentation
   - Distinguishing paragraphs from other elements

5. CODE BLOCKS
   - Identifying code blocks (indented with 4 spaces)
   - Handling multi-line code blocks
   - Preserving indentation within code blocks
   - Handling empty lines within code blocks
   - Determining when a code block ends

6. QUOTES
   - Parsing quote lines (starting with >)
   - Handling multi-line quotes
   - Managing quote nesting levels
   - Combining consecutive quote lines
   - Handling indented quotes

7. FOOTNOTES
   - Identifying the FOOTNOTES section
   - Parsing footnote definitions (e.g., "[1] Footnote text")
   - Extracting footnote numbers and text

8. FOOTNOTE REFERENCES
   - Parsing inline footnote references (e.g., "[1]")
   - Handling multiple footnote references in a paragraph

9. REFERENCES
   - Parsing standalone references (e.g., "see: target")
   - Parsing inline references (e.g., "(see: target)")
   - Handling references with anchors (e.g., "target#section")

10. INLINE FORMATTING
    - Parsing bold text (e.g., "*bold*")
    - Parsing italic text (e.g., "_italic_")
    - Handling combined formatting
    - Distinguishing formatting markers from regular text

11. SPECIAL CASES
    - Handling indented quotes (e.g., "    > Quote")
    - Managing content within sections
    - Handling paragraph breaks in quotes
    - Processing references and footnotes in formatted text

FALLBACK MECHANISM

The current implementation attempts to use the peggy parser first, and if it fails, falls back to the manual parser:

```javascript
try {
  const result = peggyParser.parse(input);
  // Use peggy parser result
} catch (error) {
  console.warn('Peggy parser failed, falling back to manual parser:', error.message);
  // Use manual parser
}
```

COMMON PEGGY PARSER ERRORS

The most common errors that trigger the fallback to the manual parser are:

1. "Expected "\r\n", [A-Z0-9 ], [\n\r], or end of input but "h" found."
   - This occurs when parsing paragraphs and other text elements

2. "Paragraph must have text"
   - This occurs when parsing footnote definitions

3. "parseInlineText is not defined"
   - This occurs when parsing elements with inline formatting

These errors indicate issues with the peggy grammar implementation that need to be addressed to fully migrate from the manual parser to peggy.js.