Implementation Plan for TxtDoc Format v2 (.rfc) - Commands
-------------------------------------------------------

This document outlines the implementation plan for the extension commands
required to support the v2 format for .rfc files as defined in
'docs/format-planning-syntax.rfc"

1. Overview
   
   The v2 format introduces several new extension commands to enhance the
   editing experience. These commands will be implemented specifically for
   .rfc files with no backward compatibility required.

2. Extension Commands Analysis
   
   The v2 format specifies the following extension commands:
   
   2.1 Format Document
       - Applies consistent formatting according to the specification
   
   2.2 Generate TOC
       - Creates or updates a table of contents based on document sessions
   
   2.3 Number Footnotes
       - Automatically numbers footnotes and ensures references are correct
   
   2.4 Full Formatting
       - Applies commands that precede this including metadata, title, TOC,
         and footnotes
   
   2.5 Check References
       - Checks that all document references point to valid targets

3. Implementation Plan: Extension Commands
   
   3.1 Format Document Command
   
       This command will format the document according to the v2 specification.
       
       Implementation steps:
       
       - Register a new command in package.json:
         "commands": [
           {
             "command": "txtdoc.formatDocument",
             "title": "TxtDoc: Format Document",
             "category": "TxtDoc"
           }
         ]
       
       - Implement the formatDocument function in extension.js:
         
         function formatDocument(document) {
           // Implementation details:
           // 1. Ensure 80 character line length with soft wrapping
           // 2. Apply consistent indentation
           // 3. Format sessions according to the specification
           // 4. Format lists correctly
         }
       
       - Register the command in the activate function:
         
         context.subscriptions.push(
           vscode.commands.registerCommand('txtdoc.formatDocument', () => {
             const editor = vscode.window.activeTextEditor;
             if (editor && editor.document.languageId === 'txtdoc') {
               formatDocument(editor.document);
             }
           })
         );
   
   3.2 Generate TOC Command
   
       This command will generate a table of contents based on the document's
       sessions.
       
       Implementation steps:
       
       - Register a new command in package.json:
         "commands": [
           {
             "command": "txtdoc.generateTOC",
             "title": "TxtDoc: Generate Table of Contents",
             "category": "TxtDoc"
           }
         ]
       
       - Implement the generateTOC function in extension.js:
         
         function generateTOC(document) {
           // Implementation details:
           // 1. Detect all sessions in the document
           // 2. Create a properly formatted TOC
           // 3. Insert or update the TOC in the document
         }
       
       - Register the command in the activate function:
         
         context.subscriptions.push(
           vscode.commands.registerCommand('txtdoc.generateTOC', () => {
             const editor = vscode.window.activeTextEditor;
             if (editor && editor.document.languageId === 'txtdoc') {
               generateTOC(editor.document);
             }
           })
         );
   
   3.3 Number Footnotes Command
   
       This command will automatically number footnotes and ensure references
       are correct.
       
       Implementation steps:
       
       - Register a new command in package.json:
         "commands": [
           {
             "command": "txtdoc.numberFootnotes",
             "title": "TxtDoc: Number Footnotes",
             "category": "TxtDoc"
           }
         ]
       
       - Implement the numberFootnotes function in extension.js:
         
         function numberFootnotes(document) {
           // Implementation details:
           // 1. Detect footnote references ([1])
           // 2. Detect footnote declarations
           // 3. Renumber footnotes sequentially
           // 4. Update references to match the new numbers
         }
       
       - Register the command in the activate function:
         
         context.subscriptions.push(
           vscode.commands.registerCommand('txtdoc.numberFootnotes', () => {
             const editor = vscode.window.activeTextEditor;
             if (editor && editor.document.languageId === 'txtdoc') {
               numberFootnotes(editor.document);
             }
           })
         );
   
   3.4 Full Formatting Command
   
       This command will apply all formatting commands in sequence.
       
       Implementation steps:
       
       - Register a new command in package.json:
         "commands": [
           {
             "command": "txtdoc.fullFormatting",
             "title": "TxtDoc: Full Formatting",
             "category": "TxtDoc"
           }
         ]
       
       - Implement the fullFormatting function in extension.js:
         
         function fullFormatting(document) {
           // Implementation details:
           // 1. Call formatDocument
           // 2. Call generateTOC
           // 3. Call numberFootnotes
         }
       
       - Register the command in the activate function:
         
         context.subscriptions.push(
           vscode.commands.registerCommand('txtdoc.fullFormatting', () => {
             const editor = vscode.window.activeTextEditor;
             if (editor && editor.document.languageId === 'txtdoc') {
               fullFormatting(editor.document);
             }
           })
         );
   
   3.5 Check References Command
   
       This command will check that all document references point to valid
       targets.
       
       Implementation steps:
       
       - Register a new command in package.json:
         "commands": [
           {
             "command": "txtdoc.checkReferences",
             "title": "TxtDoc: Check References",
             "category": "TxtDoc"
           }
         ]
       
       - Implement the checkReferences function in extension.js:
         
         function checkReferences(document) {
           // Implementation details:
           // 1. Detect all references in the document
           // 2. Validate that reference targets exist
           // 3. Report any invalid references
         }
       
       - Register the command in the activate function:
         
         context.subscriptions.push(
           vscode.commands.registerCommand('txtdoc.checkReferences', () => {
             const editor = vscode.window.activeTextEditor;
             if (editor && editor.document.languageId === 'txtdoc') {
               checkReferences(editor.document);
             }
           })
         );

4. File Changes Required
   
   4.1 extension.js:
       - Add new command functions
       - Register commands in the activate function
   
   4.2 package.json:
       - Add new commands to the contributes section

5. Testing Strategy
   
   5.1 Test each command individually:
       - Format Document
       - Generate TOC
       - Number Footnotes
       - Full Formatting
       - Check References
   
   5.2 Test edge cases:
       - Empty documents
       - Very large documents
       - Documents with invalid syntax
       - Documents with complex structures