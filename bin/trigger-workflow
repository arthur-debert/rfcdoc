#!/bin/bash
# Common script to trigger and track GitHub Actions workflows
# This script can be used for both Homebrew and APT package updates

set -e

# Parse command line arguments
WORKFLOW_NAME=""
WORKFLOW_FILE=""
PACKAGE_NAME="frcdoc"
DESCRIPTION=""
FORCE_UPDATE="false"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --workflow-name)
      WORKFLOW_NAME="$2"
      shift 2
      ;;
    --workflow-file)
      WORKFLOW_FILE="$2"
      shift 2
      ;;
    --package-name)
      PACKAGE_NAME="$2"
      shift 2
      ;;
    --description)
      DESCRIPTION="$2"
      shift 2
      ;;
    --force)
      FORCE_UPDATE="true"
      shift
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Ensure we're in the project root
cd "$(dirname "$0")/../.."

# Check if gh CLI is installed
if ! command -v gh &>/dev/null; then
  echo "Error: GitHub CLI (gh) is not installed."
  echo "Please install it from https://cli.github.com/"
  exit 1
fi

# Check if user is authenticated with GitHub
if ! gh auth status &>/dev/null; then
  echo "Error: You are not authenticated with GitHub CLI."
  echo "Please run 'gh auth login' first."
  exit 1
fi

# Get the current branch
CURRENT_BRANCH=$(git branch --show-current)
if [[ -z ${CURRENT_BRANCH} ]]; then
  echo "Error: Could not determine current branch."
  exit 1
fi

# Get the default branch (usually main or master)
DEFAULT_BRANCH=$(git remote show origin | grep "HEAD branch" | cut -d ":" -f 2 | xargs)
if [[ -z ${DEFAULT_BRANCH} ]]; then
  DEFAULT_BRANCH="main" # Fallback to main if we can't determine the default branch
fi

# Check if the current branch exists in the remote repository
if ! git ls-remote --heads origin ${CURRENT_BRANCH} | grep -q ${CURRENT_BRANCH}; then
  echo "Warning: Branch '${CURRENT_BRANCH}' does not exist in the remote repository."
  echo "Options:"
  echo "1. Use default branch '${DEFAULT_BRANCH}' instead"
  echo "2. Push current branch to remote and continue"
  echo "3. Cancel"
  read -r -p "Choose an option (1-3): " BRANCH_OPTION

  case ${BRANCH_OPTION} in
    1)
      echo "Using default branch '${DEFAULT_BRANCH}' instead."
      BRANCH_TO_USE=${DEFAULT_BRANCH}
      ;;
    2)
      echo "Pushing current branch '${CURRENT_BRANCH}' to remote..."
      git push -u origin ${CURRENT_BRANCH}
      BRANCH_TO_USE=${CURRENT_BRANCH}
      ;;
    *)
      echo "Update cancelled."
      exit 0
      ;;
  esac
else
  BRANCH_TO_USE=${CURRENT_BRANCH}
fi

# Get the current version from pyproject.toml
VERSION=$(poetry version -s)
if [[ -z ${VERSION} ]]; then
  echo "Error: Could not determine current version from pyproject.toml."
  exit 1
fi

# Use default description if not provided
if [[ -z ${DESCRIPTION} ]]; then
  if [[ ${WORKFLOW_NAME} == "Update Homebrew Formula" ]]; then
    DESCRIPTION="a Homebrew formula update"
  elif [[ ${WORKFLOW_NAME} == "Update APT Package" ]]; then
    DESCRIPTION="an APT package update"
  else
    DESCRIPTION="a workflow update"
  fi
fi

echo "Current version: ${VERSION}"
echo "Branch to use: ${BRANCH_TO_USE}"
echo "This will trigger ${DESCRIPTION} for ${PACKAGE_NAME} version ${VERSION} from branch ${BRANCH_TO_USE}."
read -r -p "Continue? (y/n): " CONFIRM

if [[ ${CONFIRM} != "y" && ${CONFIRM} != "Y" ]]; then
  echo "Update cancelled."
  exit 0
fi

# Ask if user wants to force update if not already specified
if [[ ${FORCE_UPDATE} != "true" ]]; then
  read -r -p "Force update even if no changes detected? (y/n): " FORCE_UPDATE_RESPONSE
  if [[ ${FORCE_UPDATE_RESPONSE} == "y" || ${FORCE_UPDATE_RESPONSE} == "Y" ]]; then
    FORCE_UPDATE="true"
  fi
fi

# Trigger the workflow
echo "Triggering ${DESCRIPTION} workflow..."

# Check if we're on a non-default branch and no workflow file is specified
if [[ ${BRANCH_TO_USE} != "${DEFAULT_BRANCH}" && -z ${WORKFLOW_FILE} ]]; then
  echo "You are on branch '${BRANCH_TO_USE}', which is not the default branch '${DEFAULT_BRANCH}'."
  echo "GitHub Actions workflows are only registered when they are on the default branch."
  echo ""
  echo "Options:"
  echo "1. Merge your changes to the default branch '${DEFAULT_BRANCH}' first"
  echo "2. Try running the workflow directly with the workflow file path"
  echo "3. Cancel"
  read -r -p "Choose an option (1-3): " WORKFLOW_OPTION

  case ${WORKFLOW_OPTION} in
    1)
      echo "Please merge your changes to the default branch and try again."
      exit 0
      ;;
    2)
      echo "Please provide the workflow file path (e.g., .github/workflows/update-apt-package.yml):"
      read -r WORKFLOW_FILE
      ;;
    *)
      echo "Update cancelled."
      exit 0
      ;;
  esac
fi

# Determine how to trigger the workflow
if [[ -n ${WORKFLOW_FILE} ]]; then
  echo "Attempting to run the workflow directly with the file path..."
  if gh workflow run "${WORKFLOW_FILE}" --ref "${BRANCH_TO_USE}" --field force_update=${FORCE_UPDATE} --field package_name=${PACKAGE_NAME} 2>/dev/null; then
    echo "Workflow triggered successfully!"
  else
    echo "Error: Could not trigger the workflow directly."
    echo "This could be because the workflow file has syntax errors or is not properly configured."
    echo "Please check the workflow file and try again."
    exit 1
  fi
elif gh workflow run "${WORKFLOW_NAME}" --ref "${BRANCH_TO_USE}" --field force_update=${FORCE_UPDATE} --field package_name=${PACKAGE_NAME} 2>/dev/null; then
  echo "Workflow triggered successfully!"
else
  echo "Error: Could not find the '${WORKFLOW_NAME}' workflow."
  echo "This could be because:"
  echo "1. The workflow file hasn't been committed and pushed to GitHub yet."
  echo "2. The workflow file has been committed but GitHub hasn't registered it yet."
  echo ""
  echo "Please provide the workflow file path (e.g., .github/workflows/update-apt-package.yml):"
  read -r WORKFLOW_FILE

  echo "Attempting to run the workflow directly with the file path..."
  if gh workflow run "${WORKFLOW_FILE}" --ref "${BRANCH_TO_USE}" --field force_update=${FORCE_UPDATE} --field package_name=${PACKAGE_NAME} 2>/dev/null; then
    echo "Workflow triggered successfully!"
  else
    echo "Error: Could not trigger the workflow directly."
    echo "This could be because the workflow file has syntax errors or is not properly configured."
    echo "Please check the workflow file and try again."
    exit 1
  fi
fi

echo ""
# Wait a moment for the workflow to be registered
echo "Waiting for workflow to start..."
sleep 2

# Get the run ID of the latest workflow
if [[ -n ${WORKFLOW_FILE} ]]; then
  WORKFLOW_PARAM="--workflow=${WORKFLOW_FILE}"
else
  WORKFLOW_PARAM="--workflow=\"${WORKFLOW_NAME}\""
fi

RUN_ID=$(gh run list ${WORKFLOW_PARAM} --limit 1 --json databaseId --jq '.[0].databaseId')

# Display the status of the workflow run
echo "Latest workflow run status:"
echo ""
if [[ -n ${WORKFLOW_FILE} ]]; then
  gh run list --workflow="${WORKFLOW_FILE}" --limit 1
else
  gh run list --workflow="${WORKFLOW_NAME}" --limit 1
fi

if [[ -n ${RUN_ID} ]]; then
  echo ""
  echo "You can check the detailed status with:"
  echo "gh run view ${RUN_ID}"
  echo ""
  echo "Watching workflow progress in real-time..."
  gh run watch "${RUN_ID}"
fi
