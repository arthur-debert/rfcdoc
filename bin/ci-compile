#!/bin/bash
# Script to trigger and track the release workflow for the rfcdoc extension

set -e

# Ensure we're in the project root
cd "$(dirname "$0")/.."

# Check if gh CLI is installed
if ! command -v gh &>/dev/null; then
  echo "Error: GitHub CLI (gh) is not installed."
  echo "Please install it from https://cli.github.com/"
  exit 1
fi

# Check if user is authenticated with GitHub
if ! gh auth status &>/dev/null; then
  echo "Error: You are not authenticated with GitHub CLI."
  echo "Please run 'gh auth login' first."
  exit 1
fi

# Get the current branch
CURRENT_BRANCH=$(git branch --show-current)
if [[ -z ${CURRENT_BRANCH} ]]; then
  echo "Error: Could not determine current branch."
  exit 1
fi

# Get the default branch (usually main or master)
DEFAULT_BRANCH=$(git remote show origin | grep "HEAD branch" | cut -d ":" -f 2 | xargs)
if [[ -z ${DEFAULT_BRANCH} ]]; then
  DEFAULT_BRANCH="main" # Fallback to main if we can't determine the default branch
fi

# Check if the current branch exists in the remote repository
if ! git ls-remote --heads origin ${CURRENT_BRANCH} | grep -q ${CURRENT_BRANCH}; then
  echo "Warning: Branch '${CURRENT_BRANCH}' does not exist in the remote repository."
  echo "Options:"
  echo "1. Use default branch '${DEFAULT_BRANCH}' instead"
  echo "2. Push current branch to remote and continue"
  echo "3. Cancel"
  read -r -p "Choose an option (1-3): " BRANCH_OPTION

  case ${BRANCH_OPTION} in
    1)
      echo "Using default branch '${DEFAULT_BRANCH}' instead."
      BRANCH_TO_USE=${DEFAULT_BRANCH}
      ;;
    2)
      echo "Pushing current branch '${CURRENT_BRANCH}' to remote..."
      git push -u origin ${CURRENT_BRANCH}
      BRANCH_TO_USE=${CURRENT_BRANCH}
      ;;
    *)
      echo "Release cancelled."
      exit 0
      ;;
  esac
else
  BRANCH_TO_USE=${CURRENT_BRANCH}
fi

# Get the current version from package.json
VERSION=$(node -p "require('./package.json').version")
if [[ -z ${VERSION} ]]; then
  echo "Error: Could not determine current version from package.json."
  exit 1
fi

echo "Current version: ${VERSION}"
echo "Branch to use: ${BRANCH_TO_USE}"
echo "This will trigger a release for rfcdoc-format version ${VERSION} from branch ${BRANCH_TO_USE}."
read -r -p "Continue? (y/n): " CONFIRM

if [[ ${CONFIRM} != "y" && ${CONFIRM} != "Y" ]]; then
  echo "Release cancelled."
  exit 0
fi

# Ask if user wants to force update
read -r -p "Force update even if no changes detected? (y/n): " FORCE_UPDATE_RESPONSE
if [[ ${FORCE_UPDATE_RESPONSE} == "y" || ${FORCE_UPDATE_RESPONSE} == "Y" ]]; then
  FORCE_UPDATE="true"
else
  FORCE_UPDATE="false"
fi

# Trigger the workflow
echo "Triggering release workflow..."

WORKFLOW_FILE=".github/workflows/release.yml"

# Check if we're on a non-default branch
if [[ ${BRANCH_TO_USE} != "${DEFAULT_BRANCH}" ]]; then
  echo "You are on branch '${BRANCH_TO_USE}', which is not the default branch '${DEFAULT_BRANCH}'."
  echo "GitHub Actions workflows are only registered when they are on the default branch."
  echo ""
  echo "Options:"
  echo "1. Merge your changes to the default branch '${DEFAULT_BRANCH}' first"
  echo "2. Try running the workflow directly with the workflow file path"
  echo "3. Cancel"
  read -r -p "Choose an option (1-3): " WORKFLOW_OPTION

  case ${WORKFLOW_OPTION} in
    1)
      echo "Please merge your changes to the default branch and try again."
      exit 0
      ;;
    2)
      # Continue with direct workflow file path
      ;;
    *)
      echo "Release cancelled."
      exit 0
      ;;
  esac
fi

# Attempt to run the workflow
echo "Attempting to run the release workflow..."
if gh workflow run "${WORKFLOW_FILE}" --ref "${BRANCH_TO_USE}" --field force_update=${FORCE_UPDATE} 2>/dev/null; then
  echo "Workflow triggered successfully!"
else
  echo "Error: Could not trigger the workflow."
  echo "This could be because:"
  echo "1. The workflow file hasn't been committed and pushed to GitHub yet."
  echo "2. The workflow file has been committed but GitHub hasn't registered it yet."
  exit 1
fi

echo ""
# Wait a moment for the workflow to be registered
echo "Waiting for workflow to start..."
sleep 2

# Get the run ID of the latest workflow
RUN_ID=$(gh run list --workflow="${WORKFLOW_FILE}" --limit 1 --json databaseId --jq '.[0].databaseId')

# Display the status of the workflow run
echo "Latest workflow run status:"
echo ""
gh run list --workflow="${WORKFLOW_FILE}" --limit 1

if [[ -n ${RUN_ID} ]]; then
  echo ""
  echo "You can check the detailed status with:"
  echo "gh run view ${RUN_ID}"
  echo ""
  echo "Watching workflow progress in real-time..."
  gh run watch "${RUN_ID}"
fi